# -*- coding: utf-8 -*-
"""Collision Severity Tester.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d2Qj8CpzG2iepTcvwpTQFxrevBCvtJFD
"""

import joblib
import numpy as np

from google.colab import drive
import os
drive.mount('/content/drive', force_remount=True)
file_path='/content/drive/MyDrive/collision-severity-detection'
os.chdir(file_path)

"""**In order to run the tester, the model must be downloaded from the [folder](https://drive.google.com/drive/folders/1F1ENgGyUqLWwbeOMC75tyqTrFAA65gJG?usp=sharing) and the file path above must be adjusted.**"""

# Load the saved model
rf_classifier = joblib.load('random_forest_model.pkl')

# Parameters for crash data

# Beat Type
beat_type_labels = {
    'chp county roadarea': 0,
    'chp county roadline': 1,
    'chp state highway': 2,
    'not chp': 3,
    'schoolbus on city roadway': 4
}
beat_type = int(input(f"Enter Beat Type ({', '.join(f'{v}: {k}' for k, v in beat_type_labels.items())}): "))  # Example value

# Intersection
intersection_labels = {'No': 0, 'Yes': 1, 'Unknown': 2}
intersection = int(input(f"Enter Intersection ({', '.join(f'{v}: {k}' for k, v in intersection_labels.items())}): "))  # Example value

# Weather
weather_1_labels = {
    'Unknown': 0,
    'clear': 1,
    'cloudy': 2,
    'fog': 3,
    'other': 4,
    'raining': 5,
    'snowing': 6,
    'wind': 7
}
weather_1 = int(input(f"Enter Weather ({', '.join(f'{v}: {k}' for k, v in weather_1_labels.items())}): "))  # Example value

# Location Type
location_type_labels = {
    'Unknown': 0,
    'highway': 1,
    'intersection': 2,
    'ramp': 3
}
location_type = int(input(f"Enter Location Type ({', '.join(f'{v}: {k}' for k, v in location_type_labels.items())}): "))  # Example value

# Ramp Intersection
ramp_intersection_labels = {
    'Unknown': 0,
    'intersection': 1,
    'mid-ramp': 2,
    'not state highway, intersection-related, within 250 feet': 3,
    'not state highway, ramp-related, within 100 feet': 4,
    'ramp entry, first 50 feet': 5,
    'ramp exit, last 50 feet': 6
}
ramp_intersection = int(input(f"Enter Ramp Intersection ({', '.join(f'{v}: {k}' for k, v in ramp_intersection_labels.items())}): "))  # Example value

# Side of Highway
side_of_highway_labels = {
    'Unknown': 0,
    'eastbound': 1,
    'northbound': 2,
    'southbound': 3,
    'westbound': 4
}
side_of_highway = int(input(f"Enter Side of Highway ({', '.join(f'{v}: {k}' for k, v in side_of_highway_labels.items())}): "))  # Example value

# Primary Collision Factor
primary_collision_factor_labels = {
    'Unknown': 0,
    'other improper driving': 1,
    'other than driver': 2,
    'unknown': 3,
    'vehicle code violation': 4
}
primary_collision_factor = int(input(f"Enter Primary Collision Factor ({', '.join(f'{v}: {k}' for k, v in primary_collision_factor_labels.items())}): "))  # Example value

# Motor Vehicle Involved With
motor_vehicle_involved_with_labels = {
    'Unknown': 3,
    'animal': 4,
    'bicycle': 5,
    'fixed object': 6,
    'motor vehicle on other roadway': 7,
    'non-collision': 8,
    'other motor vehicle': 9,
    'other object': 10,
    'parked motor vehicle': 11,
    'pedestrian': 12,
    'train': 13
}
motor_vehicle_involved_with = int(input(f"Enter Motor Vehicle Involved With ({', '.join(f'{v}: {k}' for k, v in motor_vehicle_involved_with_labels.items())}): "))  # Example value

# Road Surface
road_surface_labels = {
    'Unknown': 1,
    'dry': 2,
    'slippery': 3,
    'snowy': 4,
    'wet': 5
}
road_surface = int(input(f"Enter Road Surface ({', '.join(f'{v}: {k}' for k, v in road_surface_labels.items())}): "))  # Example value

# Road Condition
road_condition_1_labels = {
    'Unknown': 0,
    'construction': 1,
    'flooded': 2,
    'holes': 3,
    'loose material': 4,
    'normal': 5,
    'obstruction': 6,
    'other': 7,
    'reduced width': 8
}
road_condition_1 = int(input(f"Enter Road Condition ({', '.join(f'{v}: {k}' for k, v in road_condition_1_labels.items())}): "))  # Example value

# Lighting
lighting_labels = {
    'Unknown': 1,
    'dark with no street lights': 2,
    'dark with street lights': 3,
    'dark with street lights not functioning': 4,
    'daylight': 5,
    'dusk or dawn': 6
}
lighting = int(input(f"Enter Lighting ({', '.join(f'{v}: {k}' for k, v in lighting_labels.items())}): "))  # Example value

# Road Type (0:freeway, 1:major road, 7:non-paved)
road_type_labels = {0: 'freeway', 1: 'major road', 7: 'non-paved'}
chp_road_type = int(input(f"Enter Road Type ({', '.join(f'{k}: {v}' for k, v in road_type_labels.items())}): "))  # Example value

# Statewide Vehicle Type at Fault
statewide_vehicle_type_at_fault_labels = {
    'Unknown': 0,
    'bicycle': 1,
    'emergency vehicle': 2,
    'highway construction equipment': 3,
    'moped': 4,
    'motorcycle or scooter': 5,
    'other bus': 6,
    'other vehicle': 7,
    'passenger car': 8,
    'passenger car with trailer': 9,
    'pedestrian': 10,
    'pickup or panel truck': 11,
    'pickup or panel truck with trailer': 12,
    'schoolbus': 13,
    'truck or truck tractor': 14,
    'truck or truck tractor with trailer': 15
}
statewide_vehicle_type_at_fault = int(input(f"Enter Statewide Vehicle Type at Fault ({', '.join(f'{v}: {k}' for k, v in statewide_vehicle_type_at_fault_labels.items())}): "))  # Example value

# Primary Ramp
primary_ramp_labels = {
    'Unknown': 5,
    'eastbound off-ramp': 6,
    'eastbound on-ramp': 7,
    'northbound off-ramp': 8,
    'northbound on-ramp': 9,
    'southbound off-ramp': 10,
    'southbound on-ramp': 11,
    'westbound off-ramp': 12,
    'westbound on-ramp': 13
}
primary_ramp = int(input(f"Enter Primary Ramp ({', '.join(f'{v}: {k}' for k, v in primary_ramp_labels.items())}): "))  # Example value

# Crash Time
crash_time_labels = {
    '00:00:00': 0,
    '03:00:00': 180,
    '06:00:00': 360,
    '09:00:00': 540,
    '12:00:00': 720,
    '15:00:00': 900,
    '18:00:00': 1080,
    '21:00:00': 1260
}
crash_time = int(input(f"Enter Crash Time ({', '.join(f'{v}: {k}' for k, v in crash_time_labels.items())}): "))

# Crash Date
crash_timestamp_labels = {
    'Winter': 100745,
    'Spring': 106088,
    'Summer': 111392,
    'Fall': 95931
}
crash_timestamp = int(input(f"Enter Crash Season ({', '.join(f'{v}: {k}' for k, v in crash_timestamp_labels.items())}): "))

# Days Conditions
days_conditions_labels = {
    'Clear': 0,
    'Overcast': 1,
    'Partially cloudy': 2,
    'Rain': 3,
    'Rain, Overcast': 4,
    'Rain, Partially cloudy': 5,
    'Snow': 6,
    'Snow, Overcast': 7,
    'Snow, Partially cloudy': 8,
    'Snow, Rain': 9,
    'Snow, Rain, Overcast': 10,
    'Snow, Rain, Partially cloudy': 11,
    'Unknown': 12
}
days_conditions = int(input(f"Enter Days Conditions ({', '.join(f'{v}: {k}' for k, v in days_conditions_labels.items())}): "))  # Example value

# Legal Area
jurisdiction = 0  # Example value

# Reporting District
reporting_district = 0  # Example value

# Population
population_labels = {
    '10000 to 25000': 0,
    '100000 to 250000': 1,
    '2500 to 10000': 2,
    '25000 to 50000': 3,
    '50000 to 100000': 4,
    '<2500': 5,
    '>250000': 6,
    'Unknown': 7,
    'unincorporated': 8
}
population = int(input(f"Enter Population ({', '.join(f'{v}: {k}' for k, v in population_labels.items())}): "))  # Example value

# State Highway Indicator
state_highway_indicator_labels = {
    'No': 0,
    'Yes': 1,
    'Unknown': 2
}
state_highway_indicator = int(input(f"Enter State Highway Indicator ({', '.join(f'{v}: {k}' for k, v in state_highway_indicator_labels.items())}): "))  # Example value

# Pedestrian Action
pedestrian_action_labels = {
    'Unknown': 0,
    'crossing in intersection crosswalk': 1,
    'crossing non-intersection crosswalk': 2,
    'crossing not in crosswalk': 3,
    'in road': 4,
    'no pedestrian involved': 5,
    'not in road': 6,
    'using school bus': 7
}
pedestrian_action = int(input(f"Enter Pedestrian Action ({', '.join(f'{v}: {k}' for k, v in pedestrian_action_labels.items())}): "))  # Example value

# Control Device
control_device_labels = {
    'Unknown': 1,
    'functioning': 2,
    'none': 3,
    'not functioning': 4,
    'obscured': 5
}
control_device = int(input(f"Enter Control Device ({', '.join(f'{v}: {k}' for k, v in control_device_labels.items())}): "))  # Example value

# Secondary Ramp
secondary_ramp_labels = {
    'Unknown': 5,
    'eastbound off-ramp': 6,
    'eastbound on-ramp': 7,
    'northbound off-ramp': 8,
    'northbound on-ramp': 9,
    'southbound off-ramp': 10,
    'southbound on-ramp': 11,
    'westbound off-ramp': 12,
    'westbound on-ramp': 13
}
secondary_ramp = int(input(f"Enter Secondary Ramp ({', '.join(f'{v}: {k}' for k, v in secondary_ramp_labels.items())}): "))  # Example value

# CHP Vehicle Type at Fault
chp_vehicle_type_at_fault_labels = {
    'Unknown': 3,
    'ambulance': 5,
    'bicycle': 6,
    'mini-vans': 21,
    'motorcycle': 28,
    'motorized bicycle': 29,
    'passenger car, station': 33,
    'pickups & panels': 40,
    'police car': 43,
    'police motorcycle': 44,
    'semi': 55,
    'sport utility vehicle': 57,
    'truck tractor': 67,
    'unknown hit and run vehicle involvement': 78
}
chp_vehicle_type_at_fault = int(input(f"Enter CHP Vehicle Type at Fault ({', '.join(f'{v}: {k}' for k, v in chp_vehicle_type_at_fault_labels.items())}): "))  # Example value

# Special Condition (0-1)
special_condition = int(input("Enter Special Condition (0-1): "))  # Example value

# PCF Violation Category
pcf_violation_category_labels = {
    'Unknown': 0,
    'automobile right of way': 1,
    'brakes': 2,
    'dui': 3,
    'following too closely': 4,
    'hazardous parking': 5,
    'impeding traffic': 6,
    'improper passing': 7,
    'improper turning': 8,
    'lights': 9,
    'other equipment': 10,
    'other hazardous violation': 11,
    'other improper driving': 12,
    'other than driver (or pedestrian)': 13,
    'pedestrian right of way': 14,
    'pedestrian violation': 15,
    'speeding': 16,
    'traffic signals and signs': 17,
    'unknown': 18,
    'unsafe lane change': 19,
    'unsafe starting or backing': 20,
    'wrong side of road': 21
}
pcf_violation_category = int(input(f"Enter PCF Violation Category ({', '.join(f'{v}: {k}' for k, v in pcf_violation_category_labels.items())}): "))

# Type of Collision
type_of_collision_labels = {
    'broadside': 0,
    'head-on': 1,
    'hit object': 2,
    'other': 3,
    'overturned': 4,
    'pedestrian': 5,
    'rear end': 6,
    'sideswipe': 7
}
type_of_collision = int(input(f"Enter Type of Collision ({', '.join(f'{v}: {k}' for k, v in type_of_collision_labels.items())}): "))  # Example value

# Bicycle Collision (0 no, 1 yes)
bicycle_collision = int(input("Enter Bicycle Collision (0 for no, 1 for yes): "))  # 0 or 1

# Motorcycle Collision (0 no, 1 yes)
motorcycle_collision = int(input("Enter Motorcycle Collision (0 for no, 1 for yes): "))  # 0 or 1

# Party Count (1, 2, 3, 4, 5)
party_count = int(input("Enter Party Count (1-5): "))  # Example value

# Record Data Collection
record_data_collection = {
    'beat_type': beat_type,
    'intersection': intersection,
    'weather_1': weather_1,
    'location_type': location_type,
    'ramp_intersection': ramp_intersection,
    'side_of_highway': side_of_highway,
    'primary_collision_factor': primary_collision_factor,
    'motor_vehicle_involved_with': motor_vehicle_involved_with,
    'road_surface': road_surface,
    'road_condition_1': road_condition_1,
    'lighting': lighting,
    'chp_road_type': chp_road_type,
    'statewide_vehicle_type_at_fault': statewide_vehicle_type_at_fault,
    'primary_ramp': primary_ramp,
    'crash_time': crash_time,
    'crash_timestamp': crash_timestamp,
    'days_conditions': days_conditions,
    'jurisdiction': jurisdiction,
    'reporting_district': reporting_district,
    'population': population,
    'state_highway_indicator': state_highway_indicator,
    'pedestrian_action': pedestrian_action,
    'control_device': control_device,
    'secondary_ramp': secondary_ramp,
    'chp_vehicle_type_at_fault': chp_vehicle_type_at_fault,
    'special_condition': special_condition,
    'pcf_violation_category': pcf_violation_category,
    'type_of_collision': type_of_collision,
    'bicycle_collision': bicycle_collision,
    'motorcycle_collision': motorcycle_collision,
    'party_count': party_count

}

print("Data collection complete!")
print(record_data_collection)

# Test Case: All crash data parameters set to certain values

# Beat Type (CHP county roadline)
beat_type = 1  # 'chp county roadline'

# Intersection (Yes)
intersection = 1  # 'Yes' (indicates an intersection)

# Weather (raining)
weather_1 = 5  # 'raining'

# Location Type (intersection)
location_type = 2  # 'intersection'

# Ramp Intersection (mid-ramp)
ramp_intersection = 2  # 'mid-ramp'

# Side of Highway (northbound)
side_of_highway = 2  # 'northbound'

# Primary Collision Factor (vehicle code violation)
primary_collision_factor = 4  # 'vehicle code violation'

# Motor Vehicle Involved With (pedestrian)
motor_vehicle_involved_with = 12  # 'pedestrian'

# Road Surface (wet)
road_surface = 5  # 'wet'

# Road Condition (construction)
road_condition_1 = 1  # 'construction'

# Lighting (dark with street lights)
lighting = 3  # 'dark with street lights'

# Road Type (freeway)
chp_road_type = 0  # 'freeway'

# Statewide Vehicle Type at Fault (motorcycle or scooter)
statewide_vehicle_type_at_fault = 5  # 'motorcycle or scooter'

# Primary Ramp (northbound on-ramp)
primary_ramp = 9  # 'northbound on-ramp'

# Crash Time (03:00:00)
crash_time = 180

# Crash Date (winter)
crash_timestamp = 100745

# Days Conditions (Rain)
days_conditions = 3  # 'Rain'

# Jurisdiction (0)
jurisdiction = 0

# Reporting District (doesnt affect)
reporting_district = 0

# Population (100000 to 250000)
population = 1  # '100000 to 250000'

# State Highway Indicator (1.0)
state_highway_indicator = 1  # '1.0'

# Pedestrian Action (crossing in intersection crosswalk)
pedestrian_action = 1  # 'crossing in intersection crosswalk'

# Control Device (functioning)
control_device = 2  # 'functioning'

# Secondary Ramp (eastbound on-ramp)
secondary_ramp = 7  # 'eastbound on-ramp'

# CHP Vehicle Type at Fault (motorcycle)
chp_vehicle_type_at_fault = 28  # 'motorcycle'

# Special Condition (0)
special_condition = 0  # No special condition

# PCF Violation Category (speeding)
pcf_violation_category = 16

# Type of Collision (head-on)
type_of_collision = 5  # 'head-on'

# Bicycle Collision (No)
bicycle_collision = 1  # No bicycle involved

# Motorcycle Collision (Yes)
motorcycle_collision = 1  # Motorcycle involved

# Party Count (3 parties involved)
party_count = 3  # 3

# Expected Severity: Since the crash involves a head-on collision in rainy conditions, with a motorcycle and pedestrian involved, we might expect a high severity for this crash.

test_case = [beat_type, intersection, weather_1, location_type, ramp_intersection, side_of_highway, primary_collision_factor, motor_vehicle_involved_with, road_surface,
             road_condition_1, lighting, chp_road_type, statewide_vehicle_type_at_fault, primary_ramp, crash_time, crash_timestamp, days_conditions,
             jurisdiction, reporting_district, population, state_highway_indicator, pedestrian_action, control_device, secondary_ramp, chp_vehicle_type_at_fault, special_condition, pcf_violation_category,
             type_of_collision, bicycle_collision, motorcycle_collision, party_count]

test_case_reshaped = np.array(test_case).reshape(1, -1)
prediction = rf_classifier.predict(test_case_reshaped)
print(f"Highest Predicted class: {prediction[0]+1}")

# Get the prediction probabilities for all severity levels
probabilities = rf_classifier.predict_proba(test_case_reshaped)[0]

# Mapping of class labels to severity names
severity_labels = {0: 'fatal', 1: 'other injury', 2: 'pain', 3: 'property damage only', 4: 'severe injury'}

# Print the percentages for each severity level
for class_idx, severity in severity_labels.items():
    print(f"{severity}: {probabilities[class_idx] * 100:.2f}%")